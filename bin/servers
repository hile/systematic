#!/usr/bin/env python
"""
Script to update all linux and freebsd servers
"""

import os

from systematic.shell import Script
from systematic.serverlist import OrganizationServers,OperatingSystemGroup,ServerConfig

DEFAULT_CONFIG = '/etc/all-servers.list'
USER_CONFIG = os.path.expanduser('~/.all-servers.list')

script = Script()
script.add_option('-g','--group',action='append',help='Server OS Group')
script.add_option('-D','--description',help='Group description')
script.add_option('-a','--add-servers',help='Add server to group')
script.add_option('-r','--remove-servers',help='Add server to group')
script.add_option('-U','--update-commands',action='append',help='Update command')
script.add_option('-l','--list',action='store_true',help='List configured items')
script.add_option('-u','--update',action='store_true',help='Update servers')
script.add_option('-c','--config',help='Server list configuration file')
script.set_defaults(**{'config':DEFAULT_CONFIG})
(opts,args) = script.parse_args()

config = opts.config
if not config or not os.path.isfile(config):
    config = USER_CONFIG

servers = None
try:
    servers = OrganizationServers(config)
except ValueError,emsg:
    script.exit(1,emsg)

if opts.add_servers or opts.remove_servers:
    if not opts.group:
        script.exit(1,'Servers list modification requires group')

added_servers = []
if opts.add_servers:
    added_servers = opts.add_servers.split(',')

removed_servers = []
if opts.remove_servers:
    removed_servers = opts.remove_servers.split(',')

if opts.group:
    opt_groups = []
    for og in opts.group:
        if og.count(',')>0:
            opt_groups.extend(og.split(','))
        else:
            opt_groups.append(og)
    opt_groups = set(opt_groups)
    groups = []
    for opt_group in opt_groups:
        if opt_group in servers.keys():
            group = servers[opt_group]
            if opts.description:
                group.setDescription(opts.description)
            if opts.update_commands:
                group.setUpdateCommands(opts.update_commands)
            if added_servers:
                for server in added_servers:
                    group.addServer(server)
            if removed_servers:
                for server in removed_servers:
                    group.removeServer(server)
        else:
            group = OperatingSystemGroup(opt_group)
            if opts.description:
                group.setDescription(opts.description)
            if opts.update_commands:
                group.setUpdateCommands(opts.update_commands)
            if added_servers:
                for server in added_servers:
                    group.addServer(server)
            servers[opt_group] = group
        if group.modified:
            servers.save()
        groups.append(opt_group)
else:
    groups = servers.keys()

if opts.list:
    for name in groups:
        group = servers[name]
        if len(group)==0:
            print 'Empty server group: %s' % group
            continue
        print "Server group: %s" % group
        print "Connect command: %s" % ' '.join(group.connect_command)
        print "Command separator: %s" % group.command_separator
        if group.update_commands:
            print "Update commands:" 
            for cmd in group.update_commands:
                print '\t%s' % cmd
        print 'Servers in group:'
        for server in group:
            print '\t%s' % server

if opts.update:
    for name in groups:
        group = servers[name]
        for server in group:
            script.log.info('Updating server: %s' % server.name)
            server.update()

