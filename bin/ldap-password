#!/usr/bin/env python
"""
Change users shell, chat or mail password. 
"""

import os,pwd,getpass

from systematic.shell import Script,ScriptError
from systematic.password import PasswordServiceConfig,PasswordServiceError

script = Script()
script.add_option('-L','--list',action='store_true',help='List available password types')
script.add_option('-s','--service',action='append',help='Service to change password for')
script.add_option('-C','--config',help='Configuration file path')
script.add_option('-A','--all',action='store_true',help='Change all passwords')
(opts,args) = script.parse_args()

def ask_password(service,user,verify=False,old=None):
    if old is None and verify is False:
        label = 'Enter %s password for %s: ' % (service,user)
        password = getpass.getpass(label)
        if '\x03' in password:
            script.exit(1,'Interrupted')
        return password
    
    l1 = 'Enter new %s password for %s: ' % (service,user) 
    l2 = 'Confirm new %s password for %s: ' % (service,user) 
    while True:
        password = getpass.getpass(l1)
        if '\x03' in password:
            script.exit(1,'Interrupted')
        confirm = getpass.getpass(l2)
        if '\x03' in confirm:
            script.exit(1,'Interrupted')
        if old is not None and old==password:
            print "Password is same as current password, please try again."
        elif password!=confirm:
            print "Passwords don't match, please try again."
        else:
            break
    return password

try:
    pwc = PasswordServiceConfig(opts.config)
except PasswordServiceError,emsg:
    script.exit(1,emsg)

if opts.list:
    for name,details in pwc.items():
        print '%-10s %s' % (name,details.description)
    script.exit(0)

if opts.all:
    services = pwc.values()
else:
    services = []
    if opts.service is None:
        script.exit(1,'Choose service for which to change password')
    for s in opts.service:
        if s not in pwc.keys():
            script.exit(1,'Invalid service name: %s' % s)
        services.append(pwc[s])

admin = os.geteuid()==0 and True or False
if not admin and len(args):
    script.exit(1,'Only root can change password for other users')

if admin:
    if len(args) == 0:
        script.exit(1,'Give accounts to modify as arguments')
    for username in args:
        for service in services:
            password = pwc.get_cached_admin_password(service.server)
            if not password:
                while True:
                    password = ask_password('admin',service.admin_dn)
                    if not service.test_password(service.admin_dn,password,admin=True):
                        print 'Invalid password'
                        continue
                    pwc.cache_admin_password(service.server,password)
                    break
            user_pass = ask_password(service.name,username,verify=True,old=None)
            try:
                service.change_password(username,user_pass,password,admin=True)
                script.log.info('Successfully changed %s password for %s' % (
                    service.name,username
                ))
            except PasswordServiceError,emsg:
                print 'ERROR changing password: %s' % emsg
else:
    username = pwd.getpwuid(os.geteuid()).pw_name
    for service in services:
        while True:
            old = ask_password(service.name,username,verify=False)
            if not service.test_password(username,old):
                print 'Invalid password'
                continue
            new = ask_password(service.name,username,verify=True,old=old)
            try:
                service.change_password(username,new,old,admin=False)
                script.log.info('Successfully changed %s password for %s' % (
                    service.name,username
                ))
                break
            except PasswordServiceError,emsg:
                print 'ERROR changing password: %s' % emsg

script.exit(0)

