#!/usr/bin/env python
#
# Script to load configured SSH keys, only load if not already in keychain
# and skip key if not available.
#
# Just a nice wrapper for ssh-add really.
#

import sys,os,logging
from subprocess import call,check_output,CalledProcessError
from optparse import OptionParser

SSHDIR = os.path.join(os.getenv('HOME'),'.ssh')
CONFIG = os.path.join(SSHDIR,'sshkeys.conf')

def available_keys(path):
    """
    Parse key paths from configuration file
    """
    keys = []
    if not os.path.isfile(CONFIG):
        return keys
    for l in open(CONFIG,'r').readlines():
        l = l.strip()
        if l.startswith('#') or l == '':
            continue
        l = os.path.expandvars(os.path.expanduser(l))
        if os.path.isfile(l):
            keys.append(l)
        else:
            logging.info('Skipping missing file: %s' % l)
    return keys

def list_loaded_keys():
    """
    Parse loaded keys from ssh-add -l output
    """
    loaded = []
    try:
        for l in check_output(['ssh-add','-l']).split('\n'):
            loaded.append(l.strip())
    except CalledProcessError:
        pass
    return loaded

def check_key(loaded_keys,path):
    """
    Check if key in given path is loaded to agent
    """
    try:
        fp = check_output(['ssh-keygen','-l','-f',path]).replace('.pub','').strip()
    except CalledProcessError,e:
        print 'Error listing fingerprint for %s' % path 
        sys.exit(1)
    if loaded_keys.count(fp)>0:
        return True
    return False

def unload_key(path):
    """
    Unload key given by path if not already in loaded to agent
    """
    try:
        call(['ssh-add','-d',path])
    except CalledProcessError,e:
        print 'Error loading key %s' % path 
        sys.exit(1)

def load_key(path):
    """
    Load key given by path if not already in loaded to agent
    """
    try:
        call(['ssh-add',path])
    except CalledProcessError,e:
        print 'Error loading key %s' % path 
        sys.exit(1)

parser = OptionParser()
parser.set_defaults(**dict(keyconfig=CONFIG))
parser.add_option('-c','--key-file',dest='keyconfig',type='string',help='Path to file listing keys to process')
parser.add_option('-l','--list',action='store_true',help='List loaded keys')
parser.add_option('-d','--unload',action='store_true',help='Unload keys from keyring')
parser.add_option('-D','--unload-all',action='store_true',help='Unload all SSH keys')
parser.add_option('-v','--verbose',action='store_true',help='Verbose Messages')
(opts,args) = parser.parse_args()
if opts.verbose:
    logging.basicConfig(level=logging.INFO)

if opts.unload_all:
    try:
        call(['ssh-add','-D'])
    except CalledProcessError:
        print 'Error unloading all SSH keys'
        sys.exit(1)
    sys.exit(0)
 
loaded = list_loaded_keys()
keys = available_keys(opts.keyconfig)
for f in keys:
    if opts.list:
        if check_key(loaded,f):
            status = 'LOADED'
        else:
            status = 'NOT LOADED'
        print '%9s %s' % (status,f)
    elif opts.unload:
        if not check_key(loaded,f):
            continue
        unload_key(f)
    else:
        if check_key(loaded,f):
            continue
        load_key(f)

