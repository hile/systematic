#!/usr/bin/env python
"""
Script to update all linux and freebsd servers
"""

import os

from systematic.shell import Script
from systematic.serverlist import OrganizationServers,OperatingSystemGroup,ServerConfig

DEFAULT_CONFIG = '/etc/all-servers.list'
USER_CONFIG = os.path.expanduser('~/.all-servers.list')

script = Script()
script.add_argument('-g','--group',action='append',help='Server OS Group')
script.add_argument('-D','--description',help='Group description')
script.add_argument('-a','--add-servers',help='Add server to group')
script.add_argument('-r','--remove-servers',help='Add server to group')
script.add_argument('-U','--update-commands',action='append',help='Update command')
script.add_argument('-l','--list',action='store_true',help='List configured items')
script.add_argument('-u','--update',action='store_true',help='Update servers')
script.add_argument('-c','--config',default=DEFAULT_CONFIG,help='Server list configuration file')
args = script.parse_args()

config = args.config is not None and os.path.isfile(args.config) and config or USER_CONFIG
servers = None
try:
    servers = OrganizationServers(config)
except ValueError,emsg:
    script.exit(1,emsg)

if args.add_servers or args.remove_servers:
    if not args.group:
        script.exit(1,'Servers list modification requires group')

added_servers = []
if args.add_servers:
    added_servers = args.add_servers.split(',')

removed_servers = []
if args.remove_servers:
    removed_servers = args.remove_servers.split(',')

if args.group:
    opt_groups = []
    for og in args.group:
        if og.count(',')>0:
            opt_groups.extend(og.split(','))
        else:
            opt_groups.append(og)
    opt_groups = set(opt_groups)
    groups = []
    for opt_group in opt_groups:
        if opt_group in servers.keys():
            group = servers[opt_group]
            if args.description:
                group.setDescription(args.description)
            if args.update_commands:
                group.setUpdateCommands(args.update_commands)
            if added_servers:
                for server in added_servers:
                    group.addServer(server)
            if removed_servers:
                for server in removed_servers:
                    group.removeServer(server)
        else:
            group = OperatingSystemGroup(opt_group)
            if args.description:
                group.setDescription(args.description)
            if args.update_commands:
                group.setUpdateCommands(args.update_commands)
            if added_servers:
                for server in added_servers:
                    group.addServer(server)
            servers[opt_group] = group
        if group.modified:
            servers.save()
        groups.append(opt_group)
else:
    groups = servers.keys()

if args.list:
    for name in groups:
        group = servers[name]
        if len(group)==0:
            print 'Empty server group: %s' % group
            continue
        print "Server group: %s" % group
        print "Connect command: %s" % ' '.join(group.connect_command)
        print "Command separator: %s" % group.command_separator
        if group.update_commands:
            print "Update commands:"
            for cmd in group.update_commands:
                print '\t%s' % cmd
        print 'Servers in group:'
        for server in group:
            print '\t%s' % server

if args.update:
    for name in groups:
        group = servers[name]
        for server in group:
            if args and server not in args:
                continue
            script.log.info('Updating server: %s' % server.name)
            server.update()

